
Notes

# 190109

remove fastargs verbage from readme
provide a better xml dtd readme explanation, preferably tree like, but a single line will do as an initial thing.

consider switching to dom based xml parsing, as this sax (while competent) is rather verbose, given that it's mostly about tracking state.

parse args to find a config, if available. which means including (a/apache's) arg parsing library dependency.

parse a config to get the likely window dimensions (to calculate columns from)

hold a list of jvm locations in memory too; if there's more than one, offer that as a selection phase.
maybe add "use for session duration" option and "clear session value" in the child selection.

use an eno parser, so I can use the cloning aspects to save on config repetition

# 170911

-- remaining

Launcher		accept and use JarLoc / ArgBundle, javadoc
FastArgParser	create jarmod from ArgBundle
 [test all this]
XmlBasedParser	handle the parsing event methods ; check dtd messes the parsing state
JarModel		rename, remove javaPaths, javadoc
JfxSelect / SwingSelect 	real event thread and new gui style practice
CliSelection	handle bad user input, javadoc
SelectionUi 	javadoc
ConfigParser	javadoc
ParserFactory	javadoc
JarLocation 	javadoc
ArgBundle		javadoc

-- selection ui

Oh, I didn't realize that I'm leaning toward using the args interchangably. That won't make sense for most cases outside of work.
 Oh well. Also it means jarArgs works for the last one; but not the inital.

-- omgarg format

		// first line is the jvm location //
		final String commentTag = "<?>";
		final String jarOpenTag = "<jars>";
		final String jarCloseTag = "</jars>";
		final String argOpenTag = "<args>";
		final String argCloseTag = "</args>";

Or, should it be more suggestive of good pairs; but you can mix if you want?
../../Banana/Splaintime.jar || -out-./usr/logs/bananas

Or even I just pull it out on the assumption that the first part is valid and you can mix the rest?
../../Banana/Splaintime.jar || -out-./usr/logs/bananas

Well, what's my use case? Mix and match most jars/args interchangably. That's the answer to that.

-- launch jar

	http://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html
Here is an example that starts a process with a modified working directory and environment, and redirects standard output and error to be appended to a log file:
 ProcessBuilder pb =
   new ProcessBuilder("myCommand", "myArg1", "myArg2");
 Map<String, String> env = pb.environment();
 env.put("VAR1", "myValue");
 env.remove("OTHERVAR");
 env.put("VAR2", env.get("VAR1") + "suffix");
 pb.directory(new File("myDir"));
 File log = new File("log");
 pb.redirectErrorStream(true);
 pb.redirectOutput(Redirect.appendTo(log));
 Process p = pb.start();
 assert pb.redirectInput() == Redirect.PIPE;
 assert pb.redirectOutput().file() == log;
 assert p.getInputStream().read() == -1;
To start a process with an explicit set of environment variables, first call Map.clear() before adding environment variables.

----
170911

For Scott's sake, I want to have JarLauncher ask again after done wit this jar (as he's using it and java stopped showing the console on ms-windows. I'm curious if waiting will still redirectIo or fill up the buffer and crash. I don't have a jar that spits out a bunch of logging and lasts a brief time. I'm afraid I'll need to make a noisy jar or hack this launcher up (I may do it just to test) to do whatever.
















